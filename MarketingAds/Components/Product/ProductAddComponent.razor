@using MarketingAds.Models
@using MarketingAdsLibrary.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http
@inject ProductService productService
@inject ImageUploadService uploadService

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Add Product</h5>
            <button type="button" class="btn-close" aria-label="Close" @onclick="HideModal"></button>
        </div>
        <div class="modal-body">
            <RadzenTemplateForm Data="@product" TItem="Listing" Submit="@SaveProduct" InvalidSubmit=@OnInvalidSubmit>
                <div class="rz-p-0 rz-p-md-12">
                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12">
                            <RadzenStack>
                                <RadzenFormField Text="Product Name:" Variant="Variant.Filled">
                                    <ChildContent>
                                        <RadzenTextBox Name="title" @bind-Value="product.Title" Style="width: 100%;" />
                                    </ChildContent>
                                    <Helper>
                                        <RadzenRequiredValidator Component="title" Text="Title name is required." />
                                    </Helper>
                                </RadzenFormField>
                                <RadzenFormField Text="Product Description:" Variant="Variant.Filled">
                                    <ChildContent>
                                        <RadzenTextBox @bind-Value="product.Description" Name="Description" Style="width: 100%;" />
                                    </ChildContent>
                                    <Helper>
                                        <RadzenRequiredValidator Component="Description" Text="Description is required." />
                                    </Helper>
                                </RadzenFormField>
                                <RadzenFormField Text="Product Price:" Variant="Variant.Filled">
                                    <ChildContent>
                                        <RadzenNumeric @bind-Value="product.Price" Name="Price" Style="width: 100%;" />
                                    </ChildContent>
                                    <Helper>
                                        <RadzenRequiredValidator Component="Price" Text="Price is required." />
                                    </Helper>
                                </RadzenFormField>
                                <RadzenFormField Text="Category:" Variant="Variant.Filled">
                                    <ChildContent>
                                        <RadzenDropDown @bind-Value="product.CategoryID" Name="Category" Data="@categoryOptions" TextProperty="CategoryName" ValueProperty="CategoryID" Style="width: 100%;"  />
                                    </ChildContent>
                                    <Helper>
                                        <RadzenRequiredValidator Component="Category" Text="Category is required." />
                                    </Helper>
                                </RadzenFormField>
                                <RadzenFormField Text="Location:" Variant="Variant.Filled">
                                    <ChildContent>
                                        <RadzenDropDown @bind-Value="product.LocationID" Name="Location" Data="@LocationOptions" TextProperty="LocationName" ValueProperty="LocationID" Style="width: 100%;" />
                                    </ChildContent>
                                    <Helper>
                                        <RadzenRequiredValidator Component="Location" Text="Location is required." />
                                    </Helper>
                                </RadzenFormField>
                             
                                        <RadzenRadioButtonList @bind-Value=@radiobtnValue Name="radiobtnValue" TValue="int">
                                            <Items>
                                                <RadzenRadioButtonListItem Text="Used" Value="1" />
                                                <RadzenRadioButtonListItem Text="New" Value="2" />
                                            </Items>
                                        </RadzenRadioButtonList>
                                   
                              
                                        <InputFile OnChange="HandleFileUpload"  />
                                  
                                <RadzenFormField Text="Status:" Variant="Variant.Filled">
                                    <ChildContent>
                                        <RadzenDropDown @bind-Value="product.StatusId" Name="Status" Data="@statusOptions" TextProperty="Name" ValueProperty="Id" Style="width: 100%;" />
                                    </ChildContent>
                                    <Helper>
                                        <RadzenRequiredValidator Component="Status" Text="Status is required." />
                                    </Helper>
                                </RadzenFormField>
                                <RadzenButton Text="Add" ButtonStyle="ButtonStyle.Primary" Type="Submit" />
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>

                </div>
            </RadzenTemplateForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Listing? product { get; set; }
    [Parameter]
    public EventCallback SaveProduct { get; set; }
    [Parameter]
    public List<Status> statusOptions { get; set; }
    [Parameter]
    public int radiobtnValue { get; set; } = 1;
    [Parameter]
    public EventCallback HideModal { get; set; }
    [Parameter]
    public List<Category>? categoryOptions { get; set; }
    [Parameter]
    public List<Location>? LocationOptions { get; set; }
    public string? imagePath{ get; set; }
    public List<Listing> productList{ get; set; }
    [Parameter]
    public EventCallback<string> ImagePathChanged { get; set; }
    private int progress { get; set; }
    private string info;


    void OnProgress(UploadProgressArgs args, string name)
    {
        this.info = $"% '{name}' / {args.Loaded} of {args.Total} bytes.";
        this.progress = args.Progress;
    }
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        using (var stream = file.OpenReadStream())
        {
            var fileName = file.Name;
            var filePath = await uploadService.UploadImage(stream, fileName);
            imagePath = filePath;

            if (ImagePathChanged.HasDelegate)
            {
                await ImagePathChanged.InvokeAsync(imagePath);
            }
            // Optionally, handle the uploaded file path returned from the server
        }
    }
    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
       
    }

}
