@page "/Location"
@attribute [Authorize(Roles ="Admin")]
@using MarketingAds.Models;
@using MarketingAdsLibrary.Services;
@using MarketingAds.Components.Location;
@inject DialogService DialogService
@inject LocationService locationService;
@inject StatusService statusService;



@if (load == true)
{


    <div class=" mt-5">
        <div class="d-flex justify-content-between">
            <h3>Location Details</h3>
            @* <button class="btn btn-primary" @onclick="showModel">Add House</button> *@
            <RadzenButton Text="Add Location" Click="showModel" />
        </div>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="12" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@locations" ColumnWidth="200px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedStatus>
            <Columns>
                <RadzenDataGridColumn Property="LocationID" Title="LocationID" Width="80px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Property="LocationName" Title="LocationName" Width="160px" TextAlign="TextAlign.Center" />
                <RadzenDataGridColumn Title="Action" Width="200px" Filterable="false">
                    <Template Context="location">
                        @if (location.StatusId == 3)
                        {
                            <RadzenButton Disabled="true" Text="Delete" Icon="delete" Style="margin-right: 10px;" Click="@(args => DeleteLocation(location.LocationID))" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" />
                        }
                        else
                        {
                            <RadzenButton Text="Delete" Icon="delete" Style="margin-right: 10px;" Click="@(args => DeleteLocation(location.LocationID))" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Small" />
                        }
                        <RadzenButton Text="Edit" Icon="edit" Click="@(args => UpdateLocation(location.LocationID))" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" />

                    </Template>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </div>
    <div class="modal px-5" tabindex="-1" style="@ModalStyle">
    <div class="modal px-5" tabindex="-1" style="@ModalStyle">
            <LocationAddComponent location="location" SaveLocation="SaveLocation" HideModal="HideModal" statusOptions="statusOptions" />
</div>

    </div>


    @if (UpdateLocation != null)
    {
        <div class="modal px-5" tabindex="-1" style="@EditModalStyle">
            <LocationUpdateComponent updateLocation="locationUpdate" UpdateLocationBtn="UpdateLocationBtn" statusOptions="statusOptions" hideUpdate="hideUpdate" />
        </div>
    }


}
else
{
    <h1>Loading..</h1>
}
@code {
    public List<Location> locations;
    bool showModal = false;
    bool DeleteModel = false;
    bool EditModal = false;
    private int roleToDelete;
    private List<Status> statusOptions = new List<Status>();
    public bool load = false;
    IList<Location> selectedStatus;
    protected override async Task OnInitializedAsync()
    {
        locations = await locationService.GetLocation();
        load = true;
        selectedStatus = new List<Location>() { locations.FirstOrDefault() };

    }



    public Location location = new Location();
    public Location? locationUpdate = new Location();
    public async void SaveLocation()
    {

        showModal = false;
        await locationService.AddLocation(location);

        location = new Location();
        locations = await locationService.GetLocation();
        StateHasChanged();


    }

    void HideModal()
    {
        showModal = false;
        location = new Location();

    }
    void hideDelete()
    {
        DeleteModel = false;
    }

    void hideUpdate()
    {
        EditModal = false;

    }
    async Task showModel()
    {
        statusOptions = await statusService.GetStatus();

        showModal = true;
    }

    async Task UpdateLocation(int categoryId)
    {
        // Call the service method with the parsed memberId
        var roleMember = await locationService.GetLocationById(categoryId);
        statusOptions = await statusService.GetStatus();

        EditModal = true;
        if (roleMember != null)
        {
            locationUpdate = new Location()
                {
                    LocationID = roleMember.LocationID,
                    LocationName = roleMember.LocationName,
                    StatusId = roleMember.StatusId

                };

        }
        else
        {

        }
    }

    public async Task ShowConfirmationDialog()
    {
        bool? result = await DialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions()
            {
                OkButtonText = "Delete",
                CancelButtonText = "Cancel"
            });

        if (result == true)
        {
            await DeleteConfirmed();
        }
        else
        {
            hideDelete();
        }
    }



    protected async Task DeleteLocation(int roleId)
    {
        roleToDelete = roleId;
        DeleteModel = true;
        ShowConfirmationDialog();
    }

    private async Task DeleteConfirmed()
    {
        await locationService.DeleteAsync(roleToDelete);
        locations = await locationService.GetLocation();
        StateHasChanged();

        // Reset variables
        roleToDelete = 0;
        DeleteModel = false;
    }

    private async Task UpdateLocationBtn()
    {
        EditModal = false;
        await locationService.UpdateLocation(locationUpdate);

        locations = await locationService.GetLocation();

    }
    string ModalStyle => showModal ? "display: block;" : "display: none;";
    string DeleteModalStyle => DeleteModel ? "display: block;" : "display: none;";
    string EditModalStyle => EditModal ? "display: block;" : "display: none;";



}