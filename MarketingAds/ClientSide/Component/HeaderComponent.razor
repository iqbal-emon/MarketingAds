@using MarketingAds.Models;
@using MarketingAds.Components.Product;
@using MarketingAdsLibrary.Services;
@using MarketingAds.Components.Product;
@using MarketingAds.Pages;
@using System.Security.Claims
@inject ProductService productService
@inject DialogService DialogService
@inject StatusService statusService
@inject CategoryService categoryService
@inject ImageUploadService imageUpload
@inject LocationService locationService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager;
<nav class="navbar  navbar-expand-lg" style="background-color:rgb(0,174,239)">
    <div class="container-fluid ">
        <a class="navbar-brand" href="#" style="color:white">Marketplace</a>
        <button class="navbar-toggler" style="z-index:1000;" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" style="color:white" aria-current="page" href="/listing/allproduct">All Product</a>
                    
                </li>
              
            </ul>
           @*  <nav class="navbar navbar-dark ">
                <div class="container-fluid">
                    <form class="d-flex">
                        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                        <button class="btn btn-primary  text-white" type="submit">Search</button>
                    </form>
                </div>
            </nav> *@


            <div class="position-relative w-50">
                <div class="d-flex">
                <input  class="form-control w-50" placeholder="Search..." @oninput="OnInput">
                    <a class="btn btn-primary " href="/listing/search=@searchText" @onclick="@( () => ClearSearchList())"  style="margin-left:2px;">Search</a>


                </div>
                <div class="position-absolute w-50 suggestion-list dropdown " style="@(SearchList?.Count > 0 ? "display: block;" : "display: none;") z-index: 1000;">
                    <ul class="dropdown-menu w-100 show" style="height:200px;overflow-y:scroll;">
                        @if (SearchList != null)
                        {
                            @foreach (var search in SearchList)
                            {
                                <li>
                                    <a class="dropdown-item" href="./product/details/@search.ListingID" @onclick="@( () => ClearSearchList() )">
                                        <span class="oi oi-magnifying-glass" aria-hidden="true"></span>   @search.Title
                                    </a>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
           




          
            <button class="btn btn-primary mx-2" style="color:white" type="button" @onclick="HandleLoginClick">
                <span class="oi oi-person" aria-hidden="true"></span> 
                @loginText
            </button>

            <button class="btn btn-primary" style="color:white" type="button" @onclick="HandlePostListingClick">
                <span class="oi oi-plus" aria-hidden="true"></span>
                Post Listing
            </button>
 
        </div>
    </div>
</nav>

<div>
    @if (isPostListingClicked )
    {
        if (userRole  != null)
        {
            navigationManager.NavigateTo("Add-Product", true);
        }
        else
        {
            navigationManager.NavigateTo("/Login");

        }
    }
     
</div>




@code{
    bool showModal = false;
    bool DeleteModel = false;
    bool EditModal = false;
    public int? userId { get; set; }
    public string? userRole { get; set; }
    bool isPostListingClicked = false;
    public int radiobtnValue { get; set; } = 1;
    private List<Status> statusOptions = new List<Status>();
    private List<Category> categoryOptions = new List<Category>();
    private List<Location> LocationOptions = new List<Location>();
    private List<Listing> SearchList = new List<Listing>();
    private string imagePath;
    private string loginText { get; set; } = "Login";
    private string loginLink { get; set; } = "login";
    private string searchText;


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = Int32.Parse(user.Claims.FirstOrDefault(c => c.Type == "UserId")?.Value);
            userRole = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;
            loginText = "Account";
            


        }

    }

    private async Task OnInput(ChangeEventArgs e)
    {
         searchText = e.Value?.ToString().Trim().ToLower();
        if (!string.IsNullOrEmpty(searchText))
        {
            SearchList = await productService.GetSearchProduct(searchText);
        }
        else
        {
            SearchList = null;
        }
    }

    private void ClearSearchList()
    {
        SearchList = null;
    }




    private void HandleLoginClick()
    {
        if (userRole == "Admin")
        {
            navigationManager.NavigateTo("/admin/status");
        }
        else if (userRole == "Buyer")
        {
            navigationManager.NavigateTo("/user/product");
        }
        else
        {
            navigationManager.NavigateTo(loginLink);
        }
    }
    private async Task HandleImagePathChanged(string newPath)
    {
        imagePath = newPath;
        StateHasChanged(); // Ensure UI updates with new imagePath
    }

    public Listing product = new Listing();
    public Listing? productUpdate = new Listing();
    private void HandlePostListingClick()
    {
        isPostListingClicked=true;
       
    }

    void HideModal()
    {
        showModal = false;
        product = new Listing();

    }
    void hideDelete()
    {
        DeleteModel = false;
    }

    void hideUpdate()
    {
        EditModal = false;

    }
    async Task showModel()
    {
        statusOptions = await statusService.GetStatus();
        categoryOptions = await categoryService.GetCategory();
        LocationOptions = await locationService.GetLocation();

        showModal = true;
    }

    async Task UpdateProduct(int productId)
    {
        // Call the service method with the parsed memberId
        var roleMember = await productService.GetProductById(productId);
        statusOptions = await statusService.GetStatus();
        categoryOptions = await categoryService.GetCategory();
        LocationOptions = await locationService.GetLocation();

        EditModal = true;
        if (roleMember != null)
        {
            productUpdate = new Listing()
                {
                    ListingID = roleMember.ListingID,
                    Title = roleMember.Title,
                    Description = roleMember.Description,
                    CategoryID = roleMember.CategoryID,
                    UserID = roleMember.UserID,
                    Price = roleMember.Price,
                    LocationID = roleMember.LocationID,
                    Condition = roleMember.Condition,
                    StatusId = roleMember.StatusId

                };

        }
        else
        {

        }
    }

    public async Task ShowConfirmationDialog()
    {
        bool? result = await DialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions()
            {
                OkButtonText = "Delete",
                CancelButtonText = "Cancel"
            });

        if (result == true)
        {
            // await DeleteConfirmed();
        }
        else
        {
            hideDelete();
        }
    }

    async Task SaveProduct()
    {
        product.Condition = radiobtnValue == 1 ? "Used" : "New";
        product.UserID = userId;
        product.Condition = product.Condition;
        product.PostedDate = DateTime.Now;
        var result = await productService.AddProduct(product, imagePath);
        await InvokeAsync(StateHasChanged);
        showModal = false;
        radiobtnValue = 1;

    }

    // protected async Task DeleteProduct(int roleId)
    // {
    //     roleToDelete = roleId;
    //     DeleteModel = true;
    //     ShowConfirmationDialog();
   

    string ModalStyle => showModal ? "display: block;" : "display: none;";
    string DeleteModalStyle => DeleteModel ? "display: block;" : "display: none;";
    string EditModalStyle => EditModal ? "display: block;" : "display: none;";

}
