@using MarketingAds.Models;
@using MarketingAds.Components.Product;
@using MarketingAdsLibrary.Services;
@using MarketingAds.Components.Product;
@using MarketingAds.Pages;
@using System.Security.Claims
@inject ProductService productService
@inject DialogService DialogService
@inject StatusService statusService
@inject CategoryService categoryService
@inject ImageUploadService imageUpload
@inject LocationService locationService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager;
<nav id="navbar" class="navbar navbar-expand-lg navbar-light p-2">
    <a id="navbar-brand" class="navbar-brand" href="/webpage">MarketPlace</a>
     
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse d-flex justify-content-end" id="navbarSupportedContent">
        <div> 
            <ul id="navbar-nav" class="navbar-nav mr-auto">
            <li class="nav-item active">
                <a class="nav-link" href="/webpage">Home </a>
            </li>
           @*  <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Dropdown
                </a>
                <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                    <a class="dropdown-item" href="#">Action</a>
                    <a class="dropdown-item" href="#">Another action</a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" href="#">Something else here</a>
                </div>
            </li> *@
           @*  <li class="nav-item">
                <a class="nav-link disabled" href="#">Disabled</a>
            </li> *@
        </ul>
        </div>

   @*      <form id="search-form" class="form-inline my-2 my-lg-0">
            <input class="form-control mr-sm-2" type="search" placeholder="Search" aria-label="Search">
            <button id="search-button" class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
        </form> *@
        <div>
        <ul class="navbar-nav ml-auto">
            <li class="nav-item">
                <a class="nav-link" href="./login">Login</a>
            </li>
            <li class="nav-item">
                    <button class="btn btn-primary" type="button" @onclick="HandlePostListingClick">Post Listing</button>
            </li>
        </ul>


        </div>
    </div>
</nav>

<div>
    @if (isPostListingClicked )
    {
        navigationManager.NavigateTo("Add-Product", true);
    }
     
</div>




@code{
    bool showModal = false;
    bool DeleteModel = false;
    bool EditModal = false;
    public int? userId { get; set; }
    public string? userRole { get; set; }
    bool isPostListingClicked = false;
    public int radiobtnValue { get; set; } = 1;
    private List<Status> statusOptions = new List<Status>();
    private List<Category> categoryOptions = new List<Category>();
    private List<Location> LocationOptions = new List<Location>();
    private string imagePath;
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = Int32.Parse(user.Claims.FirstOrDefault(c => c.Type == "UserId")?.Value);
            userRole = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;

        }

    }
    private async Task HandleImagePathChanged(string newPath)
    {
        imagePath = newPath;
        StateHasChanged(); // Ensure UI updates with new imagePath
    }

    public Listing product = new Listing();
    public Listing? productUpdate = new Listing();
    private void HandlePostListingClick()
    {
        isPostListingClicked=true;
    }

    void HideModal()
    {
        showModal = false;
        product = new Listing();

    }
    void hideDelete()
    {
        DeleteModel = false;
    }

    void hideUpdate()
    {
        EditModal = false;

    }
    async Task showModel()
    {
        statusOptions = await statusService.GetStatus();
        categoryOptions = await categoryService.GetCategory();
        LocationOptions = await locationService.GetLocation();

        showModal = true;
    }

    async Task UpdateProduct(int productId)
    {
        // Call the service method with the parsed memberId
        var roleMember = await productService.GetProductById(productId);
        statusOptions = await statusService.GetStatus();
        categoryOptions = await categoryService.GetCategory();
        LocationOptions = await locationService.GetLocation();

        EditModal = true;
        if (roleMember != null)
        {
            productUpdate = new Listing()
                {
                    ListingID = roleMember.ListingID,
                    Title = roleMember.Title,
                    Description = roleMember.Description,
                    CategoryID = roleMember.CategoryID,
                    UserID = roleMember.UserID,
                    Price = roleMember.Price,
                    LocationID = roleMember.LocationID,
                    Condition = roleMember.Condition,
                    StatusId = roleMember.StatusId

                };

        }
        else
        {

        }
    }

    public async Task ShowConfirmationDialog()
    {
        bool? result = await DialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions()
            {
                OkButtonText = "Delete",
                CancelButtonText = "Cancel"
            });

        if (result == true)
        {
            // await DeleteConfirmed();
        }
        else
        {
            hideDelete();
        }
    }

    async Task SaveProduct()
    {
        product.Condition = radiobtnValue == 1 ? "Used" : "New";
        product.UserID = userId;
        product.Condition = product.Condition;
        product.PostedDate = DateTime.Now;
        var result = await productService.AddProduct(product, imagePath);
        await InvokeAsync(StateHasChanged);
        showModal = false;
        radiobtnValue = 1;

    }

    // protected async Task DeleteProduct(int roleId)
    // {
    //     roleToDelete = roleId;
    //     DeleteModel = true;
    //     ShowConfirmationDialog();
   

    string ModalStyle => showModal ? "display: block;" : "display: none;";
    string DeleteModalStyle => DeleteModel ? "display: block;" : "display: none;";
    string EditModalStyle => EditModal ? "display: block;" : "display: none;";

}
